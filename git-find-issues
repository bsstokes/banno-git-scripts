#!/usr/bin/env ruby

# Find TODOs with accompanying GitHub issues in the current Git repository.
# List all GitHub issues that are closed.
#
# To show only stale/closed issues:
#   `git find-issues`
#
# To show all issues:
#   `git find-issues all`

# Prerequisites:

# 1. Set your `GITHUB_OAUTH_REPO_TOKEN` environment variable.
# 2. Install Bundler, e.g. `gem install bundler`.
# 3. Put this script on your path, and make it executable.
# 4. Call `git find-issues`.
#
require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'octokit', '~> 4.3'
  gem 'git', '~> 1.5'
end

show_all = (ARGV[0] == 'all')

access_token = ENV['GITHUB_OAUTH_REPO_TOKEN'] || abort("GITHUB_OAUTH_REPO_TOKEN isn't defined")
client = Octokit::Client.new(:access_token => access_token)

git = Git.open('.')
file_matches = git.grep('TODO.*github.*issues.*[[:digit:]]', nil, {ignore_case: true})

issues = file_matches.flat_map do |object, file_match|
  file_path = object.split(':')[-1]

  file_match.map do |line_match|
    line_number, match = line_match

    owner, repo_name, issue_number = /https:\/\/github.com\/(.*)\/(.*)\/issues\/([[:digit:]]+)/
      .match(match)
      .captures

    issue = client.issue("#{owner}/#{repo_name}", issue_number)

    if show_all or issue.state != 'open'
      puts "file://#{file_path}:#{line_number}"
      puts "##{issue.number} #{issue.title} by @#{issue.user.login}"
      puts "#{issue.html_url} [#{issue.state}]"
      puts "\n"
    end
  end
end
